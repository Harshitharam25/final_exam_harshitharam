# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZvOekJoz6mSz--0qqzzjTmz9y-0DNQVK
"""



import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')
!pip install matplotlib-venn
!apt-get -qq install -y libfluidsynth1
# https://pypi.python.org/pypi/libarchive
!apt-get -qq install -y libarchive-dev && pip install -U libarchive
import libarchive
# https://pypi.python.org/pypi/pydot
!apt-get -qq install -y graphviz && pip install pydot
import pydot
!pip install cartopy
import cartopy
!pip install streamlit
import streamlit as st

# Load the data from the specified CSV file into a pandas DataFrame.
df_expenses = pd.read_csv("/content/HARSHITHARAM Harshitharam.xlsx - Startup Expenses.csv")

# Display the first few rows of the DataFrame to get an initial look at the data structure.
display(df_expenses.head())

# Display the first 10 rows to understand the initial structure and identify potential header/metadata rows.
display(df_expenses.head(10))

# Print the concise summary of the DataFrame, including the index dtype and column dtypes, non-null values and memory usage.
print(df_expenses.info())

# Calculate and display the number of missing values in each column to assess data completeness.
print("\nMissing values per column:")
print(df_expenses.isnull().sum())

# Inspect the first few rows to identify the actual start of the tabular data.
# This helps in determining how many initial rows need to be dropped.
display(df_expenses.head(15))

# Based on the inspection, drop the initial rows that contain metadata.
# Assuming the actual data starts from row 7 based on the initial inspection.
df_cleaned = df_expenses.iloc[6:].copy()

# Examine the column names and rename them appropriately for clarity.
# Based on the inspection, the first column seems to contain the expense items,
# the third column ('Unnamed: 2') seems to contain the planned expenses,
# and the fifth column ('Unnamed: 4') seems to contain the actual expenses.
df_cleaned = df_cleaned.rename(columns={'Startup Expenses': 'Expense Item', 'Unnamed: 2': 'Planned Expenses', 'Unnamed: 4': 'Actual Expenses'})

# Identify columns that are predominantly empty or irrelevant and drop them.
# 'Unnamed: 1' and 'Unnamed: 3' appear to be largely empty and irrelevant based on the head inspection.
df_cleaned = df_cleaned.drop(columns=['Unnamed: 1', 'Unnamed: 3'])

# Display the head of the cleaned DataFrame to verify that the initial rows are dropped,
# columns are renamed, and irrelevant columns are removed.
display(df_cleaned.head())

# Inspect the data in the remaining columns for inconsistencies or outliers.
# We can look at unique values or value counts for the 'Expense Item' column
# and descriptive statistics for the numerical columns (after conversion).
print("Value counts for 'Expense Item':")
# Display the top 20 most frequent values in 'Expense Item' to understand the variety of expense categories.
print(df_cleaned['Expense Item'].value_counts().head(20))

# Convert columns containing numerical data to the appropriate numerical data type.
# Remove '$', ',', and '-' characters which are non-numeric and can prevent conversion.
for col in ['Planned Expenses', 'Actual Expenses']:
    if col in df_cleaned.columns:
        # Convert the column to string type first to use string operations, then remove specified characters.
        df_cleaned[col] = df_cleaned[col].astype(str).str.replace('[$,-]', '', regex=True)
        # Convert the cleaned string column to numeric type, coercing errors to NaN.
        df_cleaned[col] = pd.to_numeric(df_cleaned[col], errors='coerce')

# Address any remaining missing values in the relevant columns.
# For numerical columns, we can impute with the mean or median, or drop rows.
# Given the nature of expense data, imputing with 0 might be appropriate if missing means no expense.
# Let's check the number of missing values after converting to numeric to see how many NaNs were introduced by 'coerce'.
print("\nMissing values after converting to numeric:")
print(df_cleaned.isnull().sum())

# Impute missing numerical values with 0, assuming missing means no expense for that item.
df_cleaned['Planned Expenses'] = df_cleaned['Planned Expenses'].fillna(0)
df_cleaned['Actual Expenses'] = df_cleaned['Actual Expenses'].fillna(0)

# Display the info and head of the cleaned DataFrame to verify the data types are now numeric and that
# the missing values in the numerical columns have been imputed.
print("\nInfo after cleaning and imputation:")
print(df_cleaned.info())
display(df_cleaned.head())

# Address remaining missing values in 'Expense Item' by dropping rows where 'Expense Item' is null.
# This ensures that each row represents a specific expense item.
df_cleaned.dropna(subset=['Expense Item'], inplace=True)

# Display the info and head of the cleaned DataFrame to verify that missing values in 'Expense Item' are handled
# and to see the structure of the final cleaned data.
print("\nInfo after dropping rows with missing 'Expense Item':")
print(df_cleaned.info())
display(df_cleaned.head())

# Calculate and display descriptive statistics for the numerical columns ('Planned Expenses' and 'Actual Expenses').
# This provides a summary of the central tendency, dispersion, and shape of the distributions.
print("Descriptive statistics for Planned and Actual Expenses:")
display(df_cleaned[['Planned Expenses', 'Actual Expenses']].describe())

# Print the value counts for the 'Expense Item' column.
# This shows the frequency of each unique expense category, helping to understand the distribution of expense types.
print("\nValue counts for Expense Item:")
display(df_cleaned['Expense Item'].value_counts())

# 1. Create a bar chart to visualize the counts of the top 10 most frequent 'Expense Item' categories.
# This helps in identifying the most common types of startup expenses.
plt.figure(figsize=(12, 6)) # Set the figure size for better readability
df_cleaned['Expense Item'].value_counts().head(10).plot(kind='bar') # Plot the top 10 value counts as a bar chart
plt.title('Top 10 Most Frequent Expense Items') # Set the title of the chart
plt.xlabel('Expense Item') # Set the label for the x-axis
plt.ylabel('Frequency') # Set the label for the y-axis
plt.xticks(rotation=45, ha='right') # Rotate x-axis labels for better readability
plt.tight_layout() # Adjust layout to prevent labels overlapping
plt.show() # Display the plot

# 2. Create a histogram for 'Planned Expenses'.
# This visualizes the distribution of planned expense amounts.
plt.figure(figsize=(8, 5)) # Set the figure size
plt.hist(df_cleaned['Planned Expenses'], bins=20, edgecolor='black') # Create a histogram with 20 bins and black edges
plt.title('Distribution of Planned Expenses') # Set the title
plt.xlabel('Planned Expenses') # Set the x-axis label
plt.ylabel('Frequency') # Set the y-axis label
plt.show() # Display the plot

# 3. Create a histogram for 'Actual Expenses'.
# This visualizes the distribution of actual expense amounts, allowing comparison with planned expenses.
plt.figure(figsize=(8, 5)) # Set the figure size
plt.hist(df_cleaned['Actual Expenses'], bins=20, edgecolor='black') # Create a histogram with 20 bins and black edges
plt.title('Distribution of Actual Expenses') # Set the title
plt.xlabel('Actual Expenses') # Set the x-axis label
plt.ylabel('Frequency') # Set the y-axis label
plt.show() # Display the plot

# 4. Create a box plot for 'Planned Expenses'.
# This provides a visual summary of the distribution, including median, quartiles, and potential outliers for planned expenses.
plt.figure(figsize=(8, 5)) # Set the figure size
sns.boxplot(y=df_cleaned['Planned Expenses']) # Create a box plot for 'Planned Expenses' on the y-axis
plt.title('Box Plot of Planned Expenses') # Set the title
plt.ylabel('Planned Expenses') # Set the y-axis label
plt.show() # Display the plot

# 5. Create a box plot for 'Actual Expenses'.
# This provides a visual summary of the distribution for actual expenses, similar to the planned expenses box plot.
plt.figure(figsize=(8, 5)) # Set the figure size
sns.boxplot(y=df_cleaned['Actual Expenses']) # Create a box plot for 'Actual Expenses' on the y-axis
plt.title('Box Plot of Actual Expenses') # Set the title
plt.ylabel('Actual Expenses') # Set the y-axis label
plt.show() # Display the plot